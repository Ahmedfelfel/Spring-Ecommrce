package com.felfel.springecom.entity; // package grouping for domain entities


import jakarta.persistence.*; // JPA annotations: @Entity, @Id, @OneToMany, etc.
import lombok.AllArgsConstructor; // Lombok to generate all-args constructor
import lombok.Data; // Lombok to generate getters, setters, equals, hashCode, toString
import lombok.NoArgsConstructor; // Lombok to generate no-args constructor
import java.time.LocalDateTime; // Java time type for order timestamp
import java.util.List; // Collection type for order line items

/**
 * Domain entity representing an order placed by a customer.
 *
 * <p>Fields:
 * - id: primary key generated by the database.
 * - orderId: externally visible unique order identifier (business id).
 * - customerName, email: purchaser contact details.
 * - status: current lifecycle state of the order (e.g. CREATED, SHIPPED).
 * - orderDate: timestamp when the order was created.
 * - items: list of OrderItem entities belonging to this order.
 */
@Data // generate boilerplate methods (getters/setters/toString/etc.)
@Entity(name = "orders") // map this entity to the "orders" table
@NoArgsConstructor // generate public no-args constructor
@AllArgsConstructor // generate public all-args constructor
public class Order {
    @Id // primary key marker
    @GeneratedValue(strategy = GenerationType.IDENTITY) // database-auto-generated value
    private Long id; // surrogate DB id used for persistence

    @Column(unique = true) // DB constraint ensuring business orderId is unique
    private String orderId; // external/business identifier for the order

    private String customerName; // buyer's full name

    private String email; // buyer's contact email

    private String status; // textual representation of order status

    private LocalDateTime orderDate; // timestamp when order was placed

    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL) // one order -> many items, cascade persistence ops
    private List<OrderItem> items; // list of associated OrderItem entities
}
